简单工厂模式：
提供一个创建对象实例的功能，而无须关心其具体实现，被创建实例的类型可以是接口，抽象类，也可以是具体的类

静态工厂：
使用简单工厂的时候，通常不用创建简单工厂类的类实例，没有创建实例的必要。因此可以把简单工厂类实现成一个
工具类，直接使用静态方法就好了。也就是说简单工厂的方法通常是静态的，所以也被称为静态工厂。如果要防止
客户端无谓的创建简单工厂实例，还可以把简单工厂的构造方法私有化。

简单工厂创建对象的范围：
建议控制在一个独立的组件级别或者一个模块级别，也就是一个组件或模块简单工厂。否则会导致简单工厂职责不明。

简单工厂命名建议：
类名称建议为“模块名称+Factory”
方法名称通常为“get+接口名称”或者是“create+接口名称”

简单工厂方法内部主要实现的功能是“选择合适的实现类”，选择条件或参数来源：
    - 客户端，Client传入参数 缺点是要求一定程度上，向客户暴露一定的内部实现细节
    - 配置文件，从配置文件中获取用于配置的值
    - 程序运行期的某个值。比如从缓存中获取某个运行期的值

简单工厂的本质：选择实现

何时选用简单工厂：
    - 如果向要完全封装隔离具体实现，让外部只能通过接口来操作封装体，那么可以选用简单工厂，让客户端通过工厂来获取相应的接口，而无须关心具体的事项
    - 如果想要把对外创建对象的职责集中管理和控制，可以选用简单工厂，一个简单工厂可以创建很多的、不相关的对象，可以把对外创建对象的职责集中到一个简单工厂来。从而实现集中管理的控制

相关模式：
    - 简单工厂和抽象工厂模式
        抽象工厂模式是用来选择产品簇的实现的，里面有多个用于选择并创建对象的方法，但这些方法所创建的对象之间通常是有关系的
    - 简单工厂和工厂方法模式
        工厂方法模式是把选择具体实现的功能延迟到子类去实现
    - 简单工厂和能创建对象实例的模式(单例模式、原型模式、生成器模式)配合使用

