外观模式：
    * 目的： 不是给子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能够更简单地使用子系统
           是包装已有的功能，主要负责已有的功能来实现客户需要，而不是添加新的实现
    * 有外观，但是可以不使用
    * 优点：
        - 松散耦合
        - 简单易用
        - 更好地划分访问的层次
    * 缺点：
        - 过多的或者不太合理的Facade也容易让人迷惑，到底是调用Facade好还是直接调用模块好
    * 本质：封装交互，简化调用，体现‘最少知识原则’
    * 何时选用：
        - 为一个复杂的子系统提供一个简单的接口的时候，可以考虑使用外观模式。使用外观对象来实现大部分客户需要的功能，从而简化客户的使用。
        - 让客户程序和抽象类的实现部分松散耦合，可以考虑使用外观模式，使用外观对象来将这个子系统与它的客户分离开来，从未提高子系统的独立性和可移植性。
        - 如果构建多层结构的系统，可以考虑使用外观模式，使用外观对象作为每层的入口，只要可以简化层间调用，也可以松散层次之间的依赖关系
    * 相关模式：
        - 外观模式与中介者模式
        - 外观模式与单例模式
        - 外观模式与抽象工厂模式

